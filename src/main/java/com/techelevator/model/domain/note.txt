These are just classes to be instantiated to create objects.

An object is an instantiated class.
We can use the dot property after an object to access its values or functions.
Variables inside of an object are commonly called "instance variables" or "attributes".

The attributes in a class are usually undefined since we have not yet instantiated the class into a specific object with values.
The first letter of a class name is usually capitalized.

Robot r1 = new Robot();  // This creates a new object from the class of Robot (if we had one)

The first part is "how we talk to it" the second part is what it actually is.  In this case both
are robot but sometimes we might want to talk to it a different way, like through an interface.

Doing it the above way it doesn't have it's instance variables set yet.  We could use the dot
operator to set them.  r1.name = "tom";

We can also use the dot operator to use the methods, like r1.introduceSelf(); if we there
a function with that name inside that class.

Sometimes we use the word "this" inside a class, "this" refers to the object that the object-function
has been called from.

So if I call r1.introduceSelf();  and the word "this" is inside the method defn of
introduceSelf inside the class, the "this" refers to the r1 object.  So it allows me to
say "this" and then use the dot operator on it inside the method defn in the class.

A "constructor", in the sense as we are going to discuss, is a method inside the class
that sets the values inside the object at the same time that the object is being instantiated, as opposed
to having to set the values afterward.

Constructors have a specific format:  The constructor has the same name as the class 
and the parameters have the same names as the outer variables.


++++++++++++++++

class Robot {
String name;
String color;
int weight;


Robot(String name, String color, int weight){
this.name = name;
this.color = color;
this.weight = weight;
}


}

++++++++++++++++

If we are using a constructor then we likely need to actually send values at the time of instantiation,
we would do so like this:

Robot r1 = new Robot("Tom", "red", 30);

"brilliant.org/practice/memory-layout" has good info for how computer memory works.

A class/object can have a value that contains another class/object

class Person {
	String name;
	String personality;
	boolean isSitting;
	Robot robotOwned;
	
		...	
		
}

The robot object could then be put into the person object.

If the "robotOwned" attribute is not part of the constructor, then we would say p1.robotOwned = r2;  where p1 is a person oject and r2 is a robot object.

If we have an object, thats an attribute of another object, we can still work with
the subobject, we just do add on more dot operators:

p1.robotOwned.introduceSelf();

The dot operator grabs the subthing with that name.

A class can even have one of its own objects as one of its attributes.  With the robot example, they could
both have Robot isLookingAt;   which would be were the robot object that they're looking at is documented and stored.

Classes can have public or private variables.  Public variables can be read or written directly with the dot operator, like
r1.color = "red" from anwyhere else in the file structure if they use the import statement.   Private variables can only be 
accessed from within that class/object which basically means that the programmer cannot use the dot operator to read or 
write that function directly, instead a function has to be called to read or write those values.  Usually the purpose of
 this to verify that the incoming data is valid before applying it.  For example a persons age cannot be negative, and 
 probably not above 150.
 
 The words "public", or "private" when written before classes or variables are "access modifiers".
 
 There are 5 main access modifiers:  Default, public, private, protected, static.
 (static means something never gets instantiated, thats it)
 
 Access modifiers can be used for classes, variables, methods and constructors.
 
 If we don't specify the access of a class then it usually becomes "default", which usually means it's only
 available to items in the same package in the explorer window.
 Variables are usually default since we usually don't specify infront of variables.
 
 If we want to access and use a class that's defined in a different package then we have to use the "import" feature,
but if the class is in the same package, then it should automatically "show up" without having to import it.
 
 If we had two packages in the explorer window in our project, Package1 and Package2, and package1 had a file 
 in it called ClassTemplate.java and we wanted to be able to use things from that file from within a file
 that;s in another package, we would write at the top of other file:  import Package1.ClassTemplte;
  
 As far as I understand, for the most part, each class goes in it's own file, in Java, or atleast that
 seems to have be a common way to do it.
 
Public means something is "visible to the entire world" (although they still have to import it if they're in a
different package)
The public vs private doesn't mean it automatically shows up without any effort, it just means you're allowed to import it,
 otherwise importing it won't work.
 
 "protected" means something is available to that package and all the subclasses.
 
This might be outdated, but:
 
 Variables:
 If no written access modifier is present then it's "default" which means it's visible only to the package.
 "Public" means it's visible to the world ( still has to be imported )
 "Protected" means it's visible to the package and all subclasses which is more "open" than the default.  That is mostly
 there for inheritence.
 
Private means that it is visible to the class only, and is the most restrictive.

Intellisense will commonly show us "what's visible".

With all of the above, even if its available, you still have to "import it".

Inheritence means a class inheriting something from a higher up class.  
 
 The "higher up class" should contain all the methods and variables that are common to the subclasses so that those methods
 and variables can be written in one and only one place.
 
 So if the parent class is "food" and the children clases are fruit, pizza, iceCream, broccoli, then something like
 "boolean isHealthy" would go in the parent class, so that we didn't have to write it over and over and over in all
 the chldren classes.
 
 The "upper" class is call the superclass, the lower classes are called the subclasses.  Food is the superclass in this
 case, all the foods themselves would be the subclasses.
 
 To make a class inherit a class above it, we use the key word "extends", like
 "public class potpie extends food"
 In the above example potpie is the child class, food is the parent/superclass.
 So it will inherit any variable and all the methods.
 You write each class in its own file, then write "extends food" in the top of all the
 child classes.
 
 If there is a method in a subclass with the samename as a method in the superclass, the subclass method
 takes priority, that is called "overriding".
 
 Inheritance will chain itself as well.  If country inherits from continent and continent inherits from world, then
 country ALSO inherits from world, even though it isn't direclty written.  There is a hierarchy to it.
 
 Only "public" things in a class get inherited, not private things. The class overall can still be inherited
 but those parts that are private will not be visible/accessible to the sublcasses.
 
 
 INTERFACES & ABSTRACT CLASSES++++++++++++++++++++++++++++++++++++++++++++++++++
 
 An interface is a way of grouping classes.  The reason for this is that any class that implements that interface must "do"
 all the methods that are written in that interface.  So if there is an interface called "animal" which has methods: eat, 
 sleep, walk, run, jump, then we have a bunch of classes for different types of animals, we would "group" all the different
 animal classes together by making them all implement the interface which means they must all "do" the methods in the 
 interface, because those methods are common to them all.  If that sounds exactly like inheritance with an abstract parent
 class that's because it is.  The reason that an interfaces are used instead of regular abstract class inheritance is 
 because in Java a class can only have one parent class but can many interfaces interfaces.  If a class could have 
 multiple parent classes then there would be no point in interfaces.
 
 In an abstract class, every single method doesn't necesarily have to be implemented.  Not sure exactly what that means.
 
 In some programming languages a class can inherit from multiple superclasses, (many to one), in Java a class
 can only inherit from one superclass (albeit it chain through to above ones as mentioned above).
 
 
 To define an interface we write "public interface __________ { " at the top of the file, with whatever the name of
 the interface is going where the flat line is.  I don't know if it has to be public or not.
 
 To implement an interface in a class, at the top of the file after the name of the class, we write "implements ______"
 with the name of the interface.
 
 You could write "public abstract" before all of the methods in an interface, but that is the default anyway, so it's
 not necesary.
 
 Variables defined in an interface for the most part cannot be changed.
 
 An interface is pretty much just an opening name of the interface and a line for each method that must be implemented, with
 no defn since it gets overridden.
 
 Any method that is based off an interface must be atleast as visible as the interface itself, so usually public.
 
 The other option is an abstract class. In Java, every method does not have to be implement to use the abstract class.
 
 Usually methods should only be declared in an interface, not defined.  Methods in an interface will be by default public abstract.
 
 The other way to get the job done, not using an interface is an abstract class.  In an abstract class we can simply 
 declare a function OR we can define it as well, and it doesn't have to be "overridden" later, if it's never used.
 
 When we write "abstract" before a method, that mean's that we are declaring it but we are not going to define it at
 the moment.  It's a little bit different from abstract classes.
 
 List is an interface in Java, that's used with collections.  
 
(Stream api came out in java 8)
 
In Java 1.8 we CAN define a method in the interface if we write the word "default" before it, although it defeats the purpose.

Java doesn't allow "multiple inheritance", ( linear obviously not included )
 
 Class has more power than interface, so if there is a class that extends a superclass and ikmplements an interface, and
 the same method is written in both, and the interface happens to have a "default" defn, even though most don't, the class
 definition would take precedence.
 
 "extends" goes before "implements" if we are using both.
 In Abstract classes, you can make the methods abstract or you can define them right there, just depends on the situation.
 
 
 